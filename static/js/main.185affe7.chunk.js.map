{"version":3,"sources":["components/Header.js","components/Character.js","components/Menu.js","components/Movie.js","components/Loader.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Component","Character","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","current","toggleSelect","bind","assertThisInitialized","name","replace","toLowerCase","props","movies","character","url","update","css","selected","setState","onClick","sendCharacter","src","addImage","alt","Menu","_this2","characters","map","index","Character_Character","key","updateCurrent","Movie","info","title","release_date","Loader","error","App","loading","axios","get","then","res","urls","data","films","all","l","spread","_len","arguments","length","Array","_key","j","i","catch","isLoading","isError","Header_Header","Menu_Menu","getMovies","components_Loader","movie","Movie_Movie","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.185affe7.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nexport default class Header extends Component{\n\n    render(){\n        return (\n            <header className=\"main-header\"><h2>Star Wars</h2></header>\n        )\n    }\n}","import React, {Component} from 'react';\n\nexport default class Character extends Component{\n\n    constructor(){\n        super();\n        this.state = {\n            current: \"\"\n        }\n\n        this.toggleSelect = this.toggleSelect.bind(this)\n    }\n\n    addImage(name){\n        return  \"images/\" + name.replace(/\\s/g , \"-\").toLowerCase() + \".png\";\n    }\n\n    sendCharacter(){\n        this.toggleSelect()\n        this.props.movies(this.props.character.url)\n        this.props.update(this.props.character.name)\n    }\n\n    toggleSelect(){\n        let css = (this.props.selected === this.props.character.name) ? \"selected\" : \"\";\n        this.setState({current: css})\n    }\n \n    render(){\n        return (\n            <div className=\"character\" onClick={this.sendCharacter.bind(this)}>\n                <img src={this.addImage(this.props.character.name)} alt={this.props.character.name}/>\n                <h5 className=\"character-name\">{this.props.character.name}</h5>\n            </div>\n        )\n    }\n}","import React, {Component} from 'react';\nimport Character from './Character.js'\n\nexport default class Menu extends Component{\n\n    constructor(){\n        super();\n        this.state = {\n            current: \"\"\n        }\n    }\n\n    updateCurrent(name){\n        this.setState({current: name})\n    }\n\n    render(){\n        return (\n            <aside className=\"sidebar-left\">\n            {this.props.characters.characters.map((character,index) => (\n                <Character \n                    character={character} \n                    key={character.name} \n                    movies={this.props.movies} \n                    update={this.updateCurrent.bind(this)}\n                    selected={this.state.current}\n                />\n            ))}\n            </aside>\n\n        )\n    }\n}","import React, {Component} from 'react';\n\nexport default class Movie extends Component{\n    addImage(name){\n        return  \"images/posters/\" + name.replace(/\\s/g , \"-\").toLowerCase() + \".jpg\";\n    }\n\n    render(){\n        return (\n            <div className=\"movie\">\n                <img src={this.addImage(this.props.info.title)} alt={this.props.info.title}/>\n                <h5 className=\"title\">{this.props.info.title}</h5>\n                <p className=\"release\"><strong>Released:</strong> <span className=\"date\">{this.props.info.release_date}</span></p>\n            </div>\n        )\n    }\n}","import React from 'react';\n\nconst Loader = (props) => (\n    <section className=\"messages\">\n        \n        {props.error ? \n        <div className=\"error\">\n            <h2>OOPS!<br /><span className=\"message\">There was a disturbance in the Force!</span></h2>\n        </div> \n        :\n        <div className=\"loader\">\n            <img src=\"images/loader.svg\" alt=\"loader\"/>\n        </div>}\n    </section>\n);\n\nexport default Loader;","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport Menu from './components/Menu';\nimport Movie from './components/Movie';\nimport characters from './data.json';\nimport Loader from './components/Loader'\nimport axios from 'axios';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      movies: [],\n      loading: false,\n      error: false\n    }\n  }\n\n  getMovies(name) {\n\n    this.setState({loading: true})\n\n    axios.get(name)\n      .then(res => {\n        const urls = res.data.films\n        axios.all(urls.map(l => axios.get(l)))\n        .then(axios.spread((...res) => {\n          const movies = res.map((j,i) => {\n            return j.data\n          }) \n          this.setState(() => ({movies: movies}))\n        }))\n    \n        this.setState(() => ({error: false}))\n        this.setState({loading: false})\n\n      })\n      .catch(error => {\n        this.setState(() => ({error: true}))\n      })\n  }\n\n  render() {\n    const isLoading = this.state.loading;\n    const isError = this.state.error;\n\n    return (\n      <div className=\"App grid\">\n        <Header/>\n        <Menu characters={characters} movies={this.getMovies.bind(this)}/>\n        {isLoading || isError ? <Loader error={isError}/> : \n          <article className=\"movies\">\n            {this.state.movies.map((movie,index) => (\n                <Movie info={movie} key={movie.title}/>\n            ))}\n          </article>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}